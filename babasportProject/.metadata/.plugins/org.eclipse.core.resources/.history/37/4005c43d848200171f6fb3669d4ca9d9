package cn.babasport.controler;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.babasport.common.Constants;
import cn.babasport.common.FastDFSTools;
import cn.babasport.common.PageHelper.Page;
import cn.babasport.pojo.Brand;
import cn.babasport.service.BrandService;

/**
 * 品牌管理
 * @author Administrator
 *
 */
@Controller
public class BrandControler {
	
	@Autowired
	private BrandService brandService;
	
	
	/**
	 * 通用页面跳转
	 * @param pageName
	 * @param model
	 * @param brand
	 * @return
	 * @throws Exception 
	 */
		@RequestMapping(value="/console/brand/{pageName}.do")
		public String consoleBrandShow(@PathVariable("pageName")String pageName) throws Exception{
			System.out.println(pageName);
			return "brand/"+pageName;
		}
		/**
		 * 获取品牌集合
		 * @param pageName
		 * @param model
		 * @param brand
		 * @param pageNum
		 * @param pageSize
		 * @return
		 * @throws Exception
		 */
		@RequestMapping(value="/console/brand/list.do")
		public String brandList(Model  model,Brand brand,
				Integer pageNum,Integer pageSize) throws Exception{
			
		
			//解决get请求的中文乱码问题
			if(brand.getName()!=null){
				String name = new String( brand.getName().getBytes("ISO-8859-1"),"UTF-8");
				brand.setName(name);
			}
			//调用服务方根据条件查询品牌的集合
			Page<Brand> page = brandService.findByExample(brand,pageNum,pageSize);
			//打印查询到的数据库的数据条数
			System.out.println(page.getResult().size());
			//将查询的数据放入model中,通过适配器将数据返回
			model.addAttribute("page",page);
			//数据回显,将我们的查询的数据放入model中,前台页面从model中获取数据,就可以实现数据的回显功能
			model.addAttribute("name", brand.getName());
			model.addAttribute("isDisplay", brand.getIsDisplay());
			
			return "brand/list";
		}
		
		
		/**
		 * 根据id获取当对应的brand
		 * @param model
		 * @param id
		 * @return
		 */
		@RequestMapping(value="/console/brand/edit.do")
		public String toedit(Model model,@RequestParam("id")Long id){
			Brand brand = brandService.findBrandById(id);
			System.out.println(brand);
			//将brand对象放入model
			model.addAttribute("brand", brand);
			return "brand/edit";
		}
		/**
		 * 修改brand
		 * @param model
		 * @param brand
		 * @return
		 */
		@RequestMapping(value="/console/brand/doEdit.do")
		public String doEdit(Model model,Brand brand){
			System.out.println(brand.getImgUrl());
				boolean b = brandService.updateBrandById(brand);
				if(b){
					return "redirect:/console/brand/list.do";
				}else{
					return "redirect:/console/error501.do";
				}
			
		}
		/**
		 * 采用分布式文件系统实现品牌图片上传功能,添加brand
		 * @param model
		 * @param brand
		 * @return
		 * @throws Exception 
		 * @throws IOException 
		 */
		@RequestMapping("/console/brand/addBrand.do")
		public String addBrand(Model model,Brand brand,@RequestParam("pic")MultipartFile file ) throws IOException, Exception{
			System.out.println(file.getOriginalFilename());
			//如果上传的文件不为空,name则进行文件上传
			/*if(!file.isEmpty()){
				String uploadFile = FastDFSTools.uploadFile(file.getBytes(), file.getOriginalFilename());
				brand.setImgUrl(uploadFile);
			}*/
			//实现brand的添加功能
			boolean b = brandService.add(brand);
			System.out.println(brand);
			//品牌添加成功,返回品牌列表
			if(b){
				return "redirect:/console/brand/list.do";
			//否则返回错误页面
			}else{
				return "redirect:/console/error501.do";
			}
			
		}
		/**
		 * 采用分布式文件上传系统完成图片异步上传
		 * @param file
		 * @return 
		 * @throws Exception
		 * @throws Exception
		 */
		@RequestMapping("/console/brand/upload.do")
		@ResponseBody
		public HashMap<String , String>  upload(@RequestParam("pic")MultipartFile file) throws Exception, Exception{
			HashMap<String, String> map = new HashMap<>();
			System.out.println(file.getOriginalFilename());
			//如果上传的文件不为空,name进行上传,并进行图片的回显
			if(!file.isEmpty()){
				//通过分布式文件系统上传文件,获取文件的访问地址
				String path = FastDFSTools.uploadFile(file.getBytes(),file.getOriginalFilename());
				//打印文件上传后传回的文件地址
				System.out.println(path);
				//将文件上传后,分布式文件系统返回的图片路径放入map中,返回给前端以回显图片(通过ngnix进行访问图片)
				map.put("path", Constants.FDFS_SERVER + path);
			//否则返回图片地址为null
			}else{
				map.put("path", null);
			}
		
			return map;
		}
	
		//刪除
		public String delete(String ids ,Model model){
			boolean b= brandService.deleteBrands(ids);
			if(b){
				return "redirect: /console/brand/list.do";
			}
			return null;
		}
}
